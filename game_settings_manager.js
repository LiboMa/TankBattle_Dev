/**
 * Ê∏∏ÊàèËÆæÁΩÆÁÆ°ÁêÜÂô®
 * ÁÆ°ÁêÜÊâÄÊúâÊ∏∏ÊàèËÆæÁΩÆÔºåÂåÖÊã¨Èü≥È¢ë„ÄÅÊéßÂà∂ÂíåÊ∏∏ÊàèÈÄâÈ°π
 */

class GameSettingsManager {
    constructor() {
        this.settings = {
            // Èü≥È¢ëËÆæÁΩÆ
            audio: {
                musicEnabled: true,
                soundEnabled: true,
                musicVolume: 70,
                soundVolume: 80
            },
            
            // ÊéßÂà∂ËÆæÁΩÆ
            controls: {
                keyboardEnabled: true,
                gamepadEnabled: true,
                gamepadVibrationEnabled: true,
                numpadEnabled: true
            },
            
            // Ê∏∏ÊàèËÆæÁΩÆ
            game: {
                difficulty: 'normal',
                autoSave: true
            }
        };
        
        this.defaultSettings = JSON.parse(JSON.stringify(this.settings));
        this.isInitialized = false;
        
        console.log('üéÆ GameSettingsManager initialized');
    }
    
    // ÂàùÂßãÂåñËÆæÁΩÆÁÆ°ÁêÜÂô®
    init() {
        if (this.isInitialized) return;
        
        // Âä†ËΩΩ‰øùÂ≠òÁöÑËÆæÁΩÆ
        this.loadSettings();
        
        // ËÆæÁΩÆ‰∫ã‰ª∂ÁõëÂê¨Âô®
        this.setupEventListeners();
        
        // Â∫îÁî®ËÆæÁΩÆÂà∞Ê∏∏Êàè
        this.applySettings();
        
        this.isInitialized = true;
        console.log('‚öôÔ∏è Settings manager initialized with settings:', this.settings);
    }
    
    // ËÆæÁΩÆ‰∫ã‰ª∂ÁõëÂê¨Âô®
    setupEventListeners() {
        // ËÆæÁΩÆÊåâÈíÆ
        const settingsBtn = document.getElementById('settingsButton');
        if (settingsBtn) {
            settingsBtn.addEventListener('click', () => this.showSettings());
        }
        
        // ÂÖ≥Èó≠ÊåâÈíÆ
        const closeBtn = document.getElementById('closeSettings');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => this.hideSettings());
        }
        
        // ÈÅÆÁΩ©ÁÇπÂáªÂÖ≥Èó≠
        const overlay = document.getElementById('settingsOverlay');
        if (overlay) {
            overlay.addEventListener('click', () => this.hideSettings());
        }
        
        // Èü≥È¢ëËÆæÁΩÆ
        this.setupAudioControls();
        
        // ÊéßÂà∂ËÆæÁΩÆ
        this.setupControlControls();
        
        // Ê∏∏ÊàèËÆæÁΩÆ
        this.setupGameControls();
        
        // ÊåâÈíÆ‰∫ã‰ª∂
        this.setupButtonControls();
    }
    
    // ËÆæÁΩÆÈü≥È¢ëÊéßÂà∂
    setupAudioControls() {
        // Èü≥‰πêÂºÄÂÖ≥
        const musicToggle = document.getElementById('musicToggle');
        if (musicToggle) {
            musicToggle.addEventListener('change', (e) => {
                this.settings.audio.musicEnabled = e.target.checked;
                this.applyAudioSettings();
                console.log('Music enabled:', e.target.checked);
            });
        }
        
        // Èü≥ÊïàÂºÄÂÖ≥
        const soundToggle = document.getElementById('soundToggle');
        if (soundToggle) {
            soundToggle.addEventListener('change', (e) => {
                this.settings.audio.soundEnabled = e.target.checked;
                this.applyAudioSettings();
                console.log('Sound enabled:', e.target.checked);
            });
        }
        
        // Èü≥‰πêÈü≥Èáè
        const musicVolume = document.getElementById('musicVolume');
        const musicVolumeValue = document.getElementById('musicVolumeValue');
        if (musicVolume && musicVolumeValue) {
            musicVolume.addEventListener('input', (e) => {
                const volume = parseInt(e.target.value);
                this.settings.audio.musicVolume = volume;
                musicVolumeValue.textContent = volume + '%';
                this.applyAudioSettings();
            });
        }
        
        // Èü≥ÊïàÈü≥Èáè
        const soundVolume = document.getElementById('soundVolume');
        const soundVolumeValue = document.getElementById('soundVolumeValue');
        if (soundVolume && soundVolumeValue) {
            soundVolume.addEventListener('input', (e) => {
                const volume = parseInt(e.target.value);
                this.settings.audio.soundVolume = volume;
                soundVolumeValue.textContent = volume + '%';
                this.applyAudioSettings();
            });
        }
    }
    
    // ËÆæÁΩÆÊéßÂà∂ÈÄâÈ°π
    setupControlControls() {
        // ÈîÆÁõòÊéßÂà∂ÂºÄÂÖ≥
        const keyboardToggle = document.getElementById('keyboardControlToggle');
        if (keyboardToggle) {
            keyboardToggle.addEventListener('change', (e) => {
                this.settings.controls.keyboardEnabled = e.target.checked;
                this.applyControlSettings();
                console.log('Keyboard controls enabled:', e.target.checked);
            });
        }
        
        // ÊâãÊüÑÊéßÂà∂ÂºÄÂÖ≥
        const gamepadToggle = document.getElementById('gamepadControlToggle');
        if (gamepadToggle) {
            gamepadToggle.addEventListener('change', (e) => {
                this.settings.controls.gamepadEnabled = e.target.checked;
                this.applyControlSettings();
                console.log('Gamepad controls enabled:', e.target.checked);
            });
        }
        
        // ÊâãÊüÑÈúáÂä®ÂºÄÂÖ≥
        const vibrationToggle = document.getElementById('gamepadVibrationToggle');
        if (vibrationToggle) {
            vibrationToggle.addEventListener('change', (e) => {
                this.settings.controls.gamepadVibrationEnabled = e.target.checked;
                this.applyControlSettings();
                console.log('Gamepad vibration enabled:', e.target.checked);
            });
        }
        
        // Â∞èÈîÆÁõòÊîØÊåÅÂºÄÂÖ≥
        const numpadToggle = document.getElementById('numpadToggle');
        if (numpadToggle) {
            numpadToggle.addEventListener('change', (e) => {
                this.settings.controls.numpadEnabled = e.target.checked;
                this.applyControlSettings();
                console.log('Numpad support enabled:', e.target.checked);
            });
        }
    }
    
    // ËÆæÁΩÆÊ∏∏ÊàèÈÄâÈ°π
    setupGameControls() {
        // ÈöæÂ∫¶ÈÄâÊã©
        const difficultySelect = document.getElementById('difficultySelect');
        if (difficultySelect) {
            difficultySelect.addEventListener('change', (e) => {
                this.settings.game.difficulty = e.target.value;
                this.applyGameSettings();
                console.log('Difficulty set to:', e.target.value);
            });
        }
        
        // Ëá™Âä®‰øùÂ≠òÂºÄÂÖ≥
        const autoSaveToggle = document.getElementById('autoSaveToggle');
        if (autoSaveToggle) {
            autoSaveToggle.addEventListener('change', (e) => {
                this.settings.game.autoSave = e.target.checked;
                console.log('Auto save enabled:', e.target.checked);
            });
        }
    }
    
    // ËÆæÁΩÆÊåâÈíÆÊéßÂà∂
    setupButtonControls() {
        // ÈáçÁΩÆËÆæÁΩÆÊåâÈíÆ
        const resetBtn = document.getElementById('resetSettings');
        if (resetBtn) {
            resetBtn.addEventListener('click', () => {
                this.resetToDefault();
            });
        }
        
        // ‰øùÂ≠òËÆæÁΩÆÊåâÈíÆ
        const saveBtn = document.getElementById('saveSettings');
        if (saveBtn) {
            saveBtn.addEventListener('click', () => {
                this.saveSettings();
                this.showNotification('Settings saved successfully!', 'success');
            });
        }
    }
    
    // ÊòæÁ§∫ËÆæÁΩÆÈù¢Êùø
    showSettings() {
        const panel = document.getElementById('gameSettings');
        const overlay = document.getElementById('settingsOverlay');
        
        if (panel && overlay) {
            // Êõ¥Êñ∞UIÊòæÁ§∫ÂΩìÂâçËÆæÁΩÆ
            this.updateUI();
            
            overlay.style.display = 'block';
            panel.style.display = 'block';
            
            // Ê∑ªÂä†Âä®ÁîªÊïàÊûú
            setTimeout(() => {
                panel.style.opacity = '1';
                panel.style.transform = 'translate(-50%, -50%) scale(1)';
            }, 10);
            
            console.log('‚öôÔ∏è Settings panel opened');
        }
    }
    
    // ÈöêËóèËÆæÁΩÆÈù¢Êùø
    hideSettings() {
        const panel = document.getElementById('gameSettings');
        const overlay = document.getElementById('settingsOverlay');
        
        if (panel && overlay) {
            panel.style.opacity = '0';
            panel.style.transform = 'translate(-50%, -50%) scale(0.9)';
            
            setTimeout(() => {
                overlay.style.display = 'none';
                panel.style.display = 'none';
            }, 300);
            
            console.log('‚öôÔ∏è Settings panel closed');
        }
    }
    
    // Êõ¥Êñ∞UIÊòæÁ§∫
    updateUI() {
        // Èü≥È¢ëËÆæÁΩÆ
        const musicToggle = document.getElementById('musicToggle');
        if (musicToggle) musicToggle.checked = this.settings.audio.musicEnabled;
        
        const soundToggle = document.getElementById('soundToggle');
        if (soundToggle) soundToggle.checked = this.settings.audio.soundEnabled;
        
        const musicVolume = document.getElementById('musicVolume');
        const musicVolumeValue = document.getElementById('musicVolumeValue');
        if (musicVolume && musicVolumeValue) {
            musicVolume.value = this.settings.audio.musicVolume;
            musicVolumeValue.textContent = this.settings.audio.musicVolume + '%';
        }
        
        const soundVolume = document.getElementById('soundVolume');
        const soundVolumeValue = document.getElementById('soundVolumeValue');
        if (soundVolume && soundVolumeValue) {
            soundVolume.value = this.settings.audio.soundVolume;
            soundVolumeValue.textContent = this.settings.audio.soundVolume + '%';
        }
        
        // ÊéßÂà∂ËÆæÁΩÆ
        const keyboardToggle = document.getElementById('keyboardControlToggle');
        if (keyboardToggle) keyboardToggle.checked = this.settings.controls.keyboardEnabled;
        
        const gamepadToggle = document.getElementById('gamepadControlToggle');
        if (gamepadToggle) gamepadToggle.checked = this.settings.controls.gamepadEnabled;
        
        const vibrationToggle = document.getElementById('gamepadVibrationToggle');
        if (vibrationToggle) vibrationToggle.checked = this.settings.controls.gamepadVibrationEnabled;
        
        const numpadToggle = document.getElementById('numpadToggle');
        if (numpadToggle) numpadToggle.checked = this.settings.controls.numpadEnabled;
        
        // Ê∏∏ÊàèËÆæÁΩÆ
        const difficultySelect = document.getElementById('difficultySelect');
        if (difficultySelect) difficultySelect.value = this.settings.game.difficulty;
        
        const autoSaveToggle = document.getElementById('autoSaveToggle');
        if (autoSaveToggle) autoSaveToggle.checked = this.settings.game.autoSave;
    }
    
    // Â∫îÁî®ÊâÄÊúâËÆæÁΩÆ
    applySettings() {
        this.applyAudioSettings();
        this.applyControlSettings();
        this.applyGameSettings();
    }
    
    // Â∫îÁî®Èü≥È¢ëËÆæÁΩÆ
    applyAudioSettings() {
        if (window.audioManager) {
            // Èü≥‰πêÂºÄÂÖ≥ - ‰ΩøÁî®Áé∞ÊúâÁöÑÂ±ûÊÄßÁõ¥Êé•ËÆæÁΩÆ
            window.audioManager.musicEnabled = this.settings.audio.musicEnabled;
            if (!this.settings.audio.musicEnabled) {
                window.audioManager.stopMusic();
            } else {
                // Â¶ÇÊûúÈü≥‰πêË¢´ÂêØÁî®‰∏îÂΩìÂâçÊ≤°ÊúâÊí≠ÊîæÈü≥‰πêÔºåÂ∞ùËØïÊí≠ÊîæËÉåÊôØÈü≥‰πê
                if (!window.audioManager.currentMusic) {
                    window.audioManager.playMusic('background');
                }
            }
            
            // Èü≥ÊïàÂºÄÂÖ≥ - ‰ΩøÁî®Áé∞ÊúâÁöÑÂ±ûÊÄßÁõ¥Êé•ËÆæÁΩÆ
            window.audioManager.soundEnabled = this.settings.audio.soundEnabled;
            
            // Èü≥ÈáèËÆæÁΩÆ - ‰ΩøÁî®Áé∞ÊúâÁöÑÊñπÊ≥ï
            window.audioManager.setMusicVolume(this.settings.audio.musicVolume / 100);
            window.audioManager.setSoundVolume(this.settings.audio.soundVolume / 100);
            
            console.log('üéµ Audio settings applied:', {
                musicEnabled: this.settings.audio.musicEnabled,
                soundEnabled: this.settings.audio.soundEnabled,
                musicVolume: this.settings.audio.musicVolume,
                soundVolume: this.settings.audio.soundVolume
            });
        } else {
            console.warn('‚ö†Ô∏è AudioManager not available when applying audio settings');
        }
    }
    
    // Â∫îÁî®ÊéßÂà∂ËÆæÁΩÆ
    applyControlSettings() {
        // ËÆæÁΩÆÂÖ®Â±ÄÊéßÂà∂Ê†áÂøó
        window.gameSettings = window.gameSettings || {};
        window.gameSettings.keyboardEnabled = this.settings.controls.keyboardEnabled;
        window.gameSettings.gamepadEnabled = this.settings.controls.gamepadEnabled;
        window.gameSettings.gamepadVibrationEnabled = this.settings.controls.gamepadVibrationEnabled;
        window.gameSettings.numpadEnabled = this.settings.controls.numpadEnabled;
        
        // ÈÄöÁü•Ê∏∏ÊàèÊâãÊüÑÁÆ°ÁêÜÂô®
        if (window.gamepadManager) {
            window.gamepadManager.vibrationEnabled = this.settings.controls.gamepadVibrationEnabled;
        }
        
        console.log('üéÆ Control settings applied:', {
            keyboardEnabled: this.settings.controls.keyboardEnabled,
            gamepadEnabled: this.settings.controls.gamepadEnabled,
            gamepadVibrationEnabled: this.settings.controls.gamepadVibrationEnabled,
            numpadEnabled: this.settings.controls.numpadEnabled
        });
        console.log('üåê Global gameSettings:', window.gameSettings);
    }
    
    // Â∫îÁî®Ê∏∏ÊàèËÆæÁΩÆ
    applyGameSettings() {
        // ËÆæÁΩÆÂÖ®Â±ÄÊ∏∏ÊàèÈÖçÁΩÆ
        window.gameSettings = window.gameSettings || {};
        window.gameSettings.difficulty = this.settings.game.difficulty;
        window.gameSettings.autoSave = this.settings.game.autoSave;
        
        // Â¶ÇÊûúÊ∏∏ÊàèÊ≠£Âú®ËøêË°åÔºåÂ∫îÁî®ÈöæÂ∫¶ËÆæÁΩÆ
        if (window.game && window.game.applyDifficulty) {
            window.game.applyDifficulty(this.settings.game.difficulty);
        }
    }
    
    // ‰øùÂ≠òËÆæÁΩÆÂà∞Êú¨Âú∞Â≠òÂÇ®
    saveSettings() {
        try {
            localStorage.setItem('tankBattleSettings', JSON.stringify(this.settings));
            console.log('üíæ Settings saved to localStorage');
        } catch (error) {
            console.error('‚ùå Failed to save settings:', error);
        }
    }
    
    // ‰ªéÊú¨Âú∞Â≠òÂÇ®Âä†ËΩΩËÆæÁΩÆ
    loadSettings() {
        try {
            const saved = localStorage.getItem('tankBattleSettings');
            if (saved) {
                const loadedSettings = JSON.parse(saved);
                this.settings = { ...this.settings, ...loadedSettings };
                console.log('üìÇ Settings loaded from localStorage');
            }
        } catch (error) {
            console.error('‚ùå Failed to load settings:', error);
        }
    }
    
    // ÈáçÁΩÆ‰∏∫ÈªòËÆ§ËÆæÁΩÆ
    resetToDefault() {
        if (confirm('Are you sure you want to reset all settings to default?')) {
            this.settings = JSON.parse(JSON.stringify(this.defaultSettings));
            this.updateUI();
            this.applySettings();
            this.showNotification('Settings reset to default!', 'info');
            console.log('üîÑ Settings reset to default');
        }
    }
    
    // ÊòæÁ§∫ÈÄöÁü•
    showNotification(message, type = 'info') {
        // ÂàõÂª∫ÈÄöÁü•ÂÖÉÁ¥†
        const notification = document.createElement('div');
        notification.className = `settings-notification ${type}`;
        notification.textContent = message;
        
        // Ê†∑Âºè
        notification.style.cssText = `
            position: fixed;
            top: 80px;
            right: 20px;
            background: ${type === 'success' ? '#00AA00' : type === 'error' ? '#AA0000' : '#0088AA'};
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            font-weight: bold;
            z-index: 10000;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
            transform: translateX(100%);
            transition: transform 0.3s ease;
        `;
        
        document.body.appendChild(notification);
        
        // Âä®ÁîªÊòæÁ§∫
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 10);
        
        // 3ÁßíÂêéËá™Âä®ÁßªÈô§
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }
    
    // Ëé∑ÂèñËÆæÁΩÆÂÄº
    getSetting(category, key) {
        return this.settings[category] && this.settings[category][key];
    }
    
    // ËÆæÁΩÆÂÄº
    setSetting(category, key, value) {
        if (!this.settings[category]) {
            this.settings[category] = {};
        }
        this.settings[category][key] = value;
        this.applySettings();
    }
    
    // Ëé∑ÂèñÊâÄÊúâËÆæÁΩÆ
    getAllSettings() {
        return JSON.parse(JSON.stringify(this.settings));
    }
    
    // ÂØºÂá∫ËÆæÁΩÆ
    exportSettings() {
        const dataStr = JSON.stringify(this.settings, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(dataBlob);
        
        const link = document.createElement('a');
        link.href = url;
        link.download = `tank_battle_settings_${Date.now()}.json`;
        link.click();
        
        URL.revokeObjectURL(url);
        this.showNotification('Settings exported successfully!', 'success');
    }
    
    // ÂØºÂÖ•ËÆæÁΩÆ
    importSettings(file) {
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const importedSettings = JSON.parse(e.target.result);
                this.settings = { ...this.defaultSettings, ...importedSettings };
                this.updateUI();
                this.applySettings();
                this.showNotification('Settings imported successfully!', 'success');
            } catch (error) {
                this.showNotification('Failed to import settings!', 'error');
                console.error('Import error:', error);
            }
        };
        reader.readAsText(file);
    }
}

// ÂØºÂá∫ÂÖ®Â±ÄÂÆû‰æã
window.GameSettingsManager = GameSettingsManager;

console.log('‚öôÔ∏è GameSettingsManager loaded - Ready to manage game settings!');
